from osgeo import osr, ogr
from visuallayer import *

def find_nearest_capitals(source_polygon):
    """
    This class find the nearest capital cities from a given polygon
    """

    #find buffer of the polygon
    buf = source_polygon.Buffer(0.5)

    driver = ogr.GetDriverByName("ESRI Shapefile")
    file_italy = 'data/capitals/capoluoghi_provincia_2019.shp'
    vector_italy = driver.Open(file_italy, 0)
    layer_italy = vector_italy.GetLayer(0)

    srs_italy = layer_italy.GetSpatialRef()
    target_osr = osr.SpatialReference()
    target_osr.ImportFromEPSG(4326) #WGS84
    #transform = osr.CoordinateTransformation(srs_italy, target_osr)

    nearest_capitals = []
    for capital in layer_italy:
        geom = capital.GetGeometryRef()
        geom.TransformTo(target_osr)

        if (geom.GetGeometryName() == 'POLYGON'):
            geom = switch_lat_lon(geom)

        #plot_geometry(geom, fillcolor='blue', alpha=0.5)
            if geom.Intersect(buf):
                name = capital.GetField('comune')
                plot_geometry(geom, fillcolor='blue', alpha=0.5)
                nearest_capitals.append([name,geom.ExportToWkt()])

    #Todo: try to return the capitals in order of distance
    return nearest_capitals

def switch_lat_lon(geom):
    pointList = []
    points=[]

    #plot_geometry(g, fillcolor='red', alpha=0.2)
    if (geom.GetGeometryName() == 'POLYGON'):
        g = geom.GetGeometryRef(0)
        for i in range (0, geom.GetGeometryCount()):
            linearring = geom.GetGeometryRef(i)
            new_ring = ogr.Geometry(ogr.wkbLinearRing)
            for j in range(0, linearring.GetPointCount()):
                pt = linearring.GetPoint(j)
                new_ring.AddPoint(pt[1], pt[0])

            poly = ogr.Geometry(ogr.wkbPolygon)
            poly.AddGeometry(new_ring)
    else:
        poly = ogr.Geometry(ogr.wkbPolygon)

    return poly

    #Todo:continue with the other types

    #else:
        #print (g.GetGeometryName())

def find_emergency_sources(polygon):
    #for example finding the nearest capitals
    capitals = find_nearest_capitals(polygon)
    polygons_capitals = []
    for capital in capitals:
        poly = ogr.CreateGeometryFromWkt(capital[1])
        polygons_capitals.append(poly)
    return polygons_capitals

def find_emergency_area(polygon):
    sources = find_emergency_sources(polygon)

    union = ogr.Geometry(ogr.wkbPolygon)
    for source in sources:
        plot_geometry(source, fillcolor='blue', alpha=0.5)
        union = union.Union(source)

    emergency_area = union.ConvexHull()
    plot_geometry(emergency_area, fillcolor='blue', alpha=0.05)
    return emergency_area

def find_interested_area(seismogenic_area, emergency_area):
    total_area = seismogenic_area.Union(emergency_area)
    plot_geometry(total_area, fillcolor='green', alpha=0.1)
    return total_area



if __name__ == '__main__':
    wtk_polygon = 'POLYGON ((14.6845897547088 42.1392106152556,14.6903382863841 42.1295281372479,14.7074970540358 42.0968085923237,14.7229055954594 42.0632293014054,14.7365209871147 42.0288838062503,14.748305300635 41.993867783029,14.7582257084839 41.9582787758008,14.7662545754029 41.9222159247852,14.7723695353951 41.8857796901873,14.7765535540298 41.8490715723462,14.7787949758954 41.8121938289852,14.7790875570681 41.7752491903534,14.7774304825049 41.7383405730497,14.773828368315 41.7015707933286,14.7682912488999 41.6650422806849,14.760834549001 41.6288567925164,14.751479040731 41.5931151306582,14.7402507857088 41.5579168605795,14.7271810624597 41.5233600340242,14.7123062792833 41.4895409158685,14.6956678728305 41.4565537159557,14.6773121926737 41.4244903266564,14.6572903721909 41.393440066884,14.6356581861236 41.3634894332792,14.6124758952053 41.3347218592565,14.5878080782929 41.3072174825838,14.56172345247 41.2810529221431,14.5342946816218 41.256301064493,14.505598174015 41.2330308608292,14.4757138694482 41.2113071349072,14.4447250165631 41.1911904024627,14.4127179409394 41.1727367026332,14.3362209409394 41.1312827026332,14.3039463119128 41.1148583838136,14.2708654700496 41.1001251618607,14.2370669511546 41.0871224679859,14.2026412117855 41.0758851019072,14.1676803871594 41.0664431387133,14.132278044567 41.058821848372,14.0965289329543 41.0530416280993,14.0605287293416 41.0491179477692,14.0243737827581 41.0470613085109,13.9881608563791 41.0468772146043,13.951986868554 41.0485661587486,13.9159486334189 41.0521236207434,13.8801426017889 41.0575400795869,13.8446646030217 41.0648010389567,13.8096095885455 41.0738870660076,13.7750713777358 41.0847738433802,13.7411424068223 41.0974322342828,13.7079134814974 41.1118283604717,13.6754735338887 41.1279236929205,13.6439093845459 41.1456751549381,13.6377283808608 41.149585272316,13.6189817980007 41.1510744395917,13.5820142982977 41.1560035577831,13.545361786585 41.1628945392506,13.5091283030546 41.1717278235601,13.473416698464 41.1824783369432,13.438328342188 41.1951155634699,13.4039628344766 41.2096036316701,13.370417723734 41.2259014163569,13.3377882296217 41.2439626553624,13.3061669727728 41.2637360808555,13.2756437118828 41.2851655648689,13.0358727118828 41.4632225648689,13.0073450537649 41.4855762007858,12.980012600569 41.5093763965559,12.953948620691 41.5345593524849,12.9292229822096 41.5610575621997,12.9059019655956 41.5887999936088,12.8840480860379 41.6177122793136,12.8637199258629 41.6477169159603,12.8449719774966 41.6787334719983,12.8278544973903 41.710678803288,12.8124133713009 41.7434672759803,12.7986899912883 41.7770109960696,12.786721144758 41.811220045006,12.7770812263949 41.8441501782221,12.7268472150115 41.8774838344097,12.6970923934175 41.8983607455356,12.6684613763856 41.9207540411833,12.6410313621843 41.9446033419523,12.6148763107991 41.9698443425918,12.5900667445127 41.9964089853888,12.566669557755 42.0242256436725,12.5447478367343 42.053219314943,12.5243606893371 42.0833118231012,12.5055630857546 42.1144220292369,12.4884057102656 42.1464660504043,12.4729348245756 42.1793574857973,12.4591921430808 42.2130076497135,12.4472147203928 42.2473258106782,12.4370348514277 42.2822194360861,12.4286799843289 42.3175944416975,12.4221726464579 42.3533554453199,12.4175303836537 42.389406023988,12.4162394559289 42.406329207073,12.3931640626193 42.429551421549,12.3682916983706 42.4559131815952,12.3448171255094 42.4835269702711,12.3228032739472 42.5123187613833,12.3023091577385 42.5422113707856,12.2833897168783 42.5731246632921,12.2660956700207 42.6049757675012,12.2504733785133 42.6376792979545,12.2365647221136 42.6711475840356,12.2244069867189 42.7052909049949,12.2140327644117 42.7400177304699,12.2054698660872 42.7752349658574,12.1987412468993 42.8108482018782,12.193864944723 42.8467619676671,12.1929215427871 42.8580787376778,12.1920991393997 42.8611852626611,12.1845322349277 42.897410509867,12.1788903671021 42.9339850352345,12.1751893046739 42.9708066147134,12.1734393919357 43.0077723337491,12.1736455198099 43.0447788749238,12.1758071121789 43.0817228067239,12.1799181274955 43.1185008726258,12.1859670756683 43.1550102796933,12.1939370501763 43.1911489858788,12.2038057753217 43.2268159852258,12.2155456684894 43.2619115901761,12.2291239172392 43.2963377101914,12.2445025710149 43.3299981259117,12.2616386472143 43.3627987580841,12.2804842513234 43.3946479305094,12.3009867107796 43.4254566262732,12.3230887221887 43.4551387365434,12.3467285114853 43.4836113012405,12.3718400065883 43.5107947409072,12.3983530220691 43.5366130791289,12.4261934553167 43.5609941548845,12.4552834936511 43.5838698242326,12.4855418318055 43.6051761507708,12.5168838991711 43.6248535843348,12.5492220961678 43.6428471274385,12.5824660390807 43.6591064889888,12.6304230390807 43.6810104889888,12.6636889533424 43.695177842621,12.6976420323322 43.7076085862719,12.7321916881988 43.7182695543381,12.7672457414054 43.7271323030313,12.8027106666677 43.7341731862672,12.8384918424824 43.7393734187546,12.87449380358 43.7427191261143,12.910620495629 43.7442013818969,12.946775531512 43.7438162313988,12.9828624484894 43.7415647022133,13.0187849655649 43.7374528014889,13.0544472403661 43.7314914999023,13.0897541248551 43.7236967023883,13.1246114191861 43.7140892057045,13.1589261230336 43.7026946429454,13.1926066837198 43.6895434151524,13.2255632404808 43.6746706102027,13.2577078642166 43.6581159091941,13.2889547920899 43.6399234805742,13.319220656343 43.6201418622982,13.3484247067261 43.5988238323275,13.3764890259409 43.5760262678169,13.4033387375271 43.5518099933646,13.4289022056343 43.5262396187304,13.4531112261491 43.4993833664542,13.5118442261491 43.4307433664542,13.5351416892765 43.4020129274571,13.5568889854012 43.3720919477872,13.5770253903067 43.3410639747528,13.5954946778117 43.309015646681,13.6122452767687 43.2760364510007,13.6272304150644 43.2422184743699,13.6404082502197 43.2076561455456,13.651741986225 43.1724459717133,13.6611999762845 43.1366862690135,13.6687558111823 43.1004768880172,13.6743883930242 43.0639189349162,13.677538081411 43.0325342424889,13.7845114755164 42.9614966160109,13.8142364179633 42.9406261414407,13.8428388308642 42.9182419754186,13.870241712501 42.8944043792676,13.8919074290319 42.8734871708926,13.8934446676719 42.8733640840645,13.9303307100768 42.8684264701901,13.9669022118913 42.8615355043576,14.0030558056197 42.8527106635324,14.0386893049626 42.8419768906798,14.0737019936408 42.8293645242645,14.107994910065 42.8149092125006,14.1414711270458 42.7986518125939,14.1740360257532 42.7806382752609,14.2055975631522 42.7609195148515,14.2360665321576 42.7395512654423,14.4075345321576 42.6123672654423,14.436081176076 42.5900245158215,14.4634328730811 42.5662338871926,14.4895162698658 42.5410591825908,14.5142614145213 42.5145679169435,14.537601944138 42.4868311360049,14.5594752627812 42.4579232258219,14.5798227093646 42.4279217132408,14.5985897149707 42.3969070579921,14.6157259491967 42.3649624369086,14.6311854551336 42.3321735208575,14.6449267726157 42.2986282449833,14.6569130494112 42.2644165728786,14.6671121400542 42.2296302553144,14.6754966920542 42.1943625841782,14.682044219252 42.158708142278,14.6845897547088 42.1392106152556))'
    seismogenic_area = ogr.CreateGeometryFromWkt(wtk_polygon)

    plt.show()
    plot_geometry(seismogenic_area, fillcolor='red', alpha=0.1)

    emergency_sources=find_emergency_sources(seismogenic_area)
    emergency_area=find_emergency_area(seismogenic_area)

    total_area = find_interested_area(seismogenic_area,emergency_area)
    plt.show()

    #plt.show()


